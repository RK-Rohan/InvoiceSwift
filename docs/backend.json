{
  "entities": {
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client who receives invoices.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Client entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the client."
        },
        "email": {
          "type": "string",
          "description": "Email address of the client.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the client."
        },
        "address": {
          "type": "string",
          "description": "Address of the client."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "type": "object",
      "description": "Represents an invoice issued to a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Invoice entity."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Invoice)"
        },
        "invoiceNumber": {
          "type": "string",
          "description": "Invoice number for easy tracking."
        },
        "issueDate": {
          "type": "string",
          "description": "Date the invoice was issued.",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "description": "Date the invoice is due.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount due on the invoice."
        },
        "lateFeeWarning": {
          "type": "string",
          "description": "Late fee warning message for the invoice."
        },
        "termsAndConditions": {
          "type": "string",
          "description": "Terms and conditions that client agreed to."
        }
      },
      "required": [
        "id",
        "clientId",
        "invoiceNumber",
        "issueDate",
        "dueDate",
        "totalAmount"
      ]
    },
    "InvoiceItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvoiceItem",
      "type": "object",
      "description": "Represents a single item on an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the InvoiceItem entity."
        },
        "invoiceId": {
          "type": "string",
          "description": "Reference to Invoice. (Relationship: Invoice 1:N InvoiceItem)"
        },
        "description": {
          "type": "string",
          "description": "Description of the item."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the item."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price per unit of the item."
        },
        "taxRate": {
          "type": "number",
          "description": "Tax rate applicable to the item."
        }
      },
      "required": [
        "id",
        "invoiceId",
        "description",
        "quantity",
        "unitPrice"
      ]
    },
    "CompanyProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CompanyProfile",
      "type": "object",
      "description": "Stores the user's company profile information.",
      "properties": {
        "companyName": {
          "type": "string",
          "description": "The name of the user's company."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The contact email for the company."
        },
        "phone": {
          "type": "string",
          "description": "The contact phone number for the company."
        },
        "address": {
          "type": "string",
          "description": "The physical address of the company."
        },
        "logoUrl": {
          "type": "string",
          "format": "uri",
          "description": "URL of the company logo."
        }
      },
      "required": [
        "companyName",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data specific to a user. Path-based ownership ensures only the user with ID {userId} can access these clients.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "clientId",
              "description": "The unique identifier of the client."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/clients/{clientId}/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoice data for a specific client. Path-based ownership ensures that only the user with ID {userId} can access these invoices.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "clientId",
              "description": "The unique identifier of the client."
            },
            {
              "name": "invoiceId",
              "description": "The unique identifier of the invoice."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}",
        "definition": {
          "entityName": "InvoiceItem",
          "schema": {
            "$ref": "#/backend/entities/InvoiceItem"
          },
          "description": "Stores individual items for a specific invoice. Path-based ownership ensures that only the user with ID {userId} can access these invoice items.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "clientId",
              "description": "The unique identifier of the client."
            },
            {
              "name": "invoiceId",
              "description": "The unique identifier of the invoice."
            },
            {
              "name": "invoiceItemId",
              "description": "The unique identifier of the invoice item."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/companyProfile/profile",
        "definition": {
          "entityName": "CompanyProfile",
          "schema": {
            "$ref": "#/backend/entities/CompanyProfile"
          },
          "description": "Stores the company profile for a user. There is only one profile document per user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to securely manage clients, invoices, and invoice items for the InvoiceSwift application, emphasizing authorization independence, clarity, and scalability. It leverages path-based ownership and denormalization to simplify security rules and ensure data integrity.\n\n**Authorization Independence:**\n\n*   Invoices and InvoiceItems are stored as subcollections of clients (`/users/{userId}/clients/{clientId}/invoices/{invoiceId}` and `/users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}`). This structure ensures that access to invoices and invoice items is implicitly controlled by the user's ownership of the client document.\n*   There is no `get()` call in the rules, and authorization context is self-contained within each document or derived from the path.\n\n**Structural Segregation:**\n\n*   Client, Invoice and InvoiceItem data is clearly segregated into separate collections, each with a homogeneous security posture.\n\n**Access Modeling:**\n\n*   Path-Based Ownership: The `/users/{userId}/clients/{clientId}` structure establishes clear ownership. Only the authenticated user (`request.auth.uid == userId`) can access clients under their user ID. This pattern extends to invoices and invoice items.\n\n**QAPs (Rules are not Filters):**\n\nThe structure supports secure `list` operations:\n\n*   Listing clients under `/users/{userId}/clients` is secure because only the authenticated user can access this collection.\n*   Listing invoices under `/users/{userId}/clients/{clientId}/invoices` is secure because access is restricted to the owner of the client document (`userId`).\n*   Listing invoice items under `/users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems` is secure because access is restricted to the owner of the client document (`userId`).\n\n**Invariants:**\n\n*   Ownership: The path-based ownership model ensures that only the authenticated user can create, read, update, or delete clients and their associated data.\n*   Timestamps: While not explicitly included in the schema, timestamp fields (e.g., `createdAt`, `updatedAt`) can be added to the entities and managed by the application, with security rules enforcing their integrity (e.g., `allow create: if request.resource.data.createdAt == request.time;`).\n\nThis structure ensures secure and scalable access to invoice data while adhering to the core design principles of authorization independence, clarity, and QAPs."
  }
}