/**
 * @fileOverview Firestore Security Rules for InvoiceSwift.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear separation of user data.  Clients, invoices, and invoice items are subcollections of each user.
 *
 * Key Security Decisions:
 * - Path-based ownership is enforced for all data. The authenticated user ID must match the {userId} path segment.
 * - Invoices and InvoiceItems inherit ownership from their parent Client document via path structure.
 * - List operations are restricted to the owner of the data.
 * - Data validation is relaxed to facilitate rapid prototyping. Only relational integrity (ownership) is validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to client documents. Only the authenticated user can manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user creates a new client document with their user ID in the path and matching `id` field.
     * @allow (get, list) - Authenticated user reads their own client data.
     * @allow (update, delete) - Authenticated user updates or deletes their own client data.
     * @deny (create) - User attempts to create a client for another user by providing a mismatched `id`.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Helper function to check if the userId matches the clientId on document creation.
      function isValidClientOwnerOnCreate(userId) {
          return request.resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidClientOwnerOnCreate(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to invoice documents under a specific client. Only the authenticated user (owner of the client) can manage invoices.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (create) - Authenticated user creates a new invoice document under their client.
     * @allow (get, list) - Authenticated user reads invoices under their client.
     * @allow (update, delete) - Authenticated user updates or deletes invoices under their client.
     * @deny (create) - User attempts to create an invoice for another user or client.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to invoice item documents under a specific invoice. Only the authenticated user (owner of the invoice) can manage invoice items.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (create) - Authenticated user creates a new invoice item document under their invoice.
     * @allow (get, list) - Authenticated user reads invoice items under their invoice.
     * @allow (update, delete) - Authenticated user updates or deletes invoice items under their invoice.
     * @deny (create) - User attempts to create an invoice item for another user or invoice.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}