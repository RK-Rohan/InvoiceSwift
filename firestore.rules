/**
 * @fileOverview Firestore Security Rules for InvoiceSwift.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model. Each user can only access the clients, invoices, and invoice items nested under their own user ID.
 *
 * Data Structure:
 * - /users/{userId}/clients/{clientId}
 * - /users/{userId}/clients/{clientId}/invoices/{invoiceId}
 * - /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
 *
 * Key Security Decisions:
 * - Only authenticated users can access data.
 * - Data is strictly namespaced under the user's UID.
 * - List operations are allowed only for the owner of the data.
 *
 * Denormalization for Authorization:
 * - The path `/users/{userId}/...` serves as the source of truth for authorization, removing the need for `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /users/{userId}/clients/{clientId} collection.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user with UID 'user123' can create a new client under their user ID: request.auth.uid == 'user123'
     * @allow (get) - Authenticated user with UID 'user123' can get their own client: request.auth.uid == 'user123'
     * @allow (update) - Authenticated user with UID 'user123' can update their own client: request.auth.uid == 'user123'
     * @allow (delete) - Authenticated user with UID 'user123' can delete their own client: request.auth.uid == 'user123'
     * @allow (list) - Authenticated user with UID 'user123' can list their own clients: request.auth.uid == 'user123'
     * @deny (create) - Authenticated user with UID 'user456' cannot create a client under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (get) - Authenticated user with UID 'user456' cannot get a client under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (update) - Authenticated user with UID 'user456' cannot update a client under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete a client under another user's ID ('user123'): request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == clientId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the /users/{userId}/clients/{clientId}/invoices/{invoiceId} collection.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (create) - Authenticated user with UID 'user123' can create a new invoice under their client and user ID: request.auth.uid == 'user123'
     * @allow (get) - Authenticated user with UID 'user123' can get their own invoice: request.auth.uid == 'user123'
     * @allow (update) - Authenticated user with UID 'user123' can update their own invoice: request.auth.uid == 'user123'
     * @allow (delete) - Authenticated user with UID 'user123' can delete their own invoice: request.auth.uid == 'user123'
     * @allow (list) - Authenticated user with UID 'user123' can list their own invoices: request.auth.uid == 'user123'
     * @deny (create) - Authenticated user with UID 'user456' cannot create an invoice under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (get) - Authenticated user with UID 'user456' cannot get an invoice under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (update) - Authenticated user with UID 'user456' cannot update an invoice under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete an invoice under another user's ID ('user123'): request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.clientId == clientId && isValidInvoiceData();
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.clientId == request.resource.data.clientId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} collection.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (create) - Authenticated user with UID 'user123' can create a new invoice item under their invoice, client, and user ID: request.auth.uid == 'user123'
     * @allow (get) - Authenticated user with UID 'user123' can get their own invoice item: request.auth.uid == 'user123'
     * @allow (update) - Authenticated user with UID 'user123' can update their own invoice item: request.auth.uid == 'user123'
     * @allow (delete) - Authenticated user with UID 'user123' can delete their own invoice item: request.auth.uid == 'user123'
     * @allow (list) - Authenticated user with UID 'user123' can list their own invoice items: request.auth.uid == 'user123'
     * @deny (create) - Authenticated user with UID 'user456' cannot create an invoice item under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (get) - Authenticated user with UID 'user456' cannot get an invoice item under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (update) - Authenticated user with UID 'user456' cannot update an invoice item under another user's ID ('user123'): request.auth.uid != 'user123'
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete an invoice item under another user's ID ('user123'): request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.invoiceId == invoiceId && isValidInvoiceItemData();
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.invoiceId == request.resource.data.invoiceId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // Basic validation for Invoice data on create (only clientId consistency)
    function isValidInvoiceData() {
        return true; // Placeholder for more specific validation if needed
    }

     // Basic validation for InvoiceItem data on create (only invoiceId consistency)
    function isValidInvoiceItemData() {
        return true; // Placeholder for more specific validation if needed
    }
  }
}