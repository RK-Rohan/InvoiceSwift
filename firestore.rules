/**
 * @fileoverview Firestore Security Rules for InvoiceSwift.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, creating a clear separation of user data. Company profiles, clients, invoices, and invoice items are all organized within this structure.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Strict ownership checks are enforced on all write operations.
 * - Data consistency between the path and document content is enforced on creation and updates.
 *
 * Denormalization for Authorization:
 * The rules leverage the path-based ownership model to avoid the need for costly `get()` calls. The `userId` is derived directly from the path, ensuring efficient authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * Defines security rules for user documents. Only the authenticated user
     * can create their own document, and no one can list all users.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own document.
     *   request.auth.uid: 'user123'
     *   resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' tries to create a document for 'user456'.
     *   request.auth.uid: 'user123'
     *   resource.data.id: 'user456'
     * @deny (list) Any user tries to list all user documents.
     * @principle Restricts access to a user's own data tree and prevents listing of all users.
     */
    match /users/{userId} {
      // Only allow creation if the user is creating their own document.
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Defines security rules for company profiles. Only the authenticated user
     * can create, read, update, and delete their own company profile.
     * @path /users/{userId}/companyProfile/profile
     * @allow (get) User with ID 'user123' reads their own company profile.
     *   request.auth.uid: 'user123'
     * @allow (create) User with ID 'user123' creates their own company profile.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read the company profile of 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/companyProfile/profile {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Defines security rules for clients. Only the authenticated user
     * can create, read, update, and delete their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get) User with ID 'user123' reads their own client with ID 'client456'.
     *   request.auth.uid: 'user123'
     * @allow (create) User with ID 'user123' creates a new client.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read a client owned by 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for invoices. Only the authenticated user
     * can create, read, update, and delete their own invoices.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (get) User with ID 'user123' reads their own invoice with ID 'invoice789'.
     *   request.auth.uid: 'user123'
     * @allow (create) User with ID 'user123' creates a new invoice.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read an invoice owned by 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for invoice items. Only the authenticated user
     * can create, read, update, and delete their own invoice items.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (get) User with ID 'user123' reads their own invoice item with ID 'item012'.
     *   request.auth.uid: 'user123'
     * @allow (create) User with ID 'user123' creates a new invoice item.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read an invoice item owned by 'user456'.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}