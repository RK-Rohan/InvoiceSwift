/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for clients, invoices, and invoice items, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with clients, invoices, and invoice items organized as subcollections. This hierarchical structure provides clear ownership and simplifies security rules.
 * /users/{userId}/clients/{clientId}
 * /users/{userId}/clients/{clientId}/invoices/{invoiceId}
 * /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules enforce that the `userId` path segment must match the authenticated user's UID for all write operations.
 * - Clients can create their own client documents, with the `id` field of the document matching their `auth.uid`.
 * - Invoices and InvoiceItems inherit the same ownership as their parent Client document.
 *
 * Denormalization for Authorization:
 * The rules rely on path-based ownership, where the `userId` path segment is used to verify ownership. This avoids the need for costly `get()` calls to check ownership in separate documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for client documents.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can create a client with ID '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' under their user ID.
     * @allow (get, list) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can read their own client document.
     * @allow (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can update their own client document.
     * @deny (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot create a client under another user's ID.
     * @deny (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot update or delete another user's client document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for invoice documents.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can create an invoice under their client's ID.
     * @allow (get, list) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can read their own invoice document.
     * @allow (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can update their own invoice document.
     * @deny (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot create an invoice under another user's client ID.
     * @deny (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot update or delete another user's invoice document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for invoice item documents.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can create an invoice item under their invoice's ID.
     * @allow (get, list) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can read their own invoice item document.
     * @allow (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' can update their own invoice item document.
     * @deny (create) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot create an invoice item under another user's invoice ID.
     * @deny (update, delete) Authenticated user '4RSNw6kC8rhG2y3qBYZ9dm4r6GB3' cannot update or delete another user's invoice item document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}