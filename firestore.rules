/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for clients, invoices, and invoice items, ensuring that only the authenticated user who owns the data can access it.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with further subcollections for clients, invoices, and invoice items. This hierarchical structure simplifies authorization based on path-based ownership.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed as there is no top-level /users collection.
 * - All write operations are restricted to the owner of the data, based on the {userId} path segment.
 * - Data validation is minimal in this prototyping phase, focusing on relational integrity (e.g., userId consistency) rather than comprehensive schema checks.
 *
 * Denormalization for Authorization:
 * The rules rely on the path-based ownership model, avoiding the need for denormalization or extra reads. The userId is extracted directly from the path for authorization checks.
 *
 * Structural Segregation:
 * Clients, invoices, and invoice items are stored in separate subcollections under the user's document, allowing for a clear and consistent security posture for each entity type.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the owner of a user's data to manage their clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 creates a new client under their user ID.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "name": "New Client" } } }
     * @allow (get) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 reads client data under their user ID.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @allow (update) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 updates client data under their user ID.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "name": "Updated Client" } } }
     * @allow (delete) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 deletes a client under their user ID.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @deny (create) - User X tries to create a client under the ID of user Y.
     *   Request: { "auth": { "uid": "X" }, "resource": { "data": { "id": "Y", "name": "New Client" } } }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      // Helper function to check if the request is made by the owner of the user ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner of a client to manage their invoices.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (create) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 creates a new invoice for a client they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "invoiceNumber": "INV-001" } } }
     * @allow (get) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 reads invoice data for a client they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @allow (update) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 updates invoice data for a client they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "invoiceNumber": "INV-002" } } }
     * @allow (delete) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 deletes an invoice for a client they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @deny (create) - User X tries to create an invoice for a client owned by user Y.
     *   Request: { "auth": { "uid": "X" }, "resource": { "data": { "clientId": "Y", "invoiceNumber": "INV-001" } } }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      // Reuse the isOwner function defined above.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner of an invoice to manage its items.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (create) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 creates a new invoice item for an invoice they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "description": "Item 1" } } }
     * @allow (get) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 reads invoice item data for an invoice they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @allow (update) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 updates invoice item data for an invoice they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" }, "resource": { "data": { "description": "Updated Item 1" } } }
     * @allow (delete) - User 4RSNw6kC8rhG2y3qBYZ9dm4r6GB3 deletes an invoice item for an invoice they own.
     *   Request: { "auth": { "uid": "4RSNw6kC8rhG2y3qBYZ9dm4r6GB3" } }
     * @deny (create) - User X tries to create an invoice item for an invoice owned by user Y.
     *   Request: { "auth": { "uid": "X" }, "resource": { "data": { "invoiceId": "Y", "description": "Item 1" } } }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      // Reuse the isOwner function defined above.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}