/**
 * @fileoverview Firestore Security Rules for InvoiceSwift.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access their own clients, invoices, and invoice items.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, providing a clear hierarchy for ownership.  Clients are stored under /users/{userId}/clients/{clientId}, invoices under /users/{userId}/clients/{clientId}/invoices/{invoiceId}, and invoice items under /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}.
 *
 * Key Security Decisions:
 * - Path-based ownership is the primary security mechanism. The `userId` in the path must match the authenticated user's UID.
 * - Data validation is limited to relational integrity (e.g., `userId` in path matching `clientId` in document).
 * - List operations are allowed for owners on their respective collections.
 * - Open write rules are strictly forbidden.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for securing client documents under a user's collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user creates a new client with their userId.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update or delete the client.
     * @deny (create, update, delete) - Any other user trying to create, update, or delete this client.
     * @principle Enforces document ownership for all operations on client documents.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == clientId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for securing invoice documents under a client's collection.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}
     * @allow (create) - Authenticated user creates a new invoice with their userId.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update or delete the invoice.
     * @deny (create, update, delete) - Any other user trying to create, update, or delete this invoice.
     * @principle Enforces document ownership for all operations on invoice documents.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == invoiceId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for securing invoice item documents under an invoice's collection.
     * @path /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId}
     * @allow (create) - Authenticated user creates a new invoice item with their userId.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update or delete the invoice item.
     * @deny (create, update, delete) - Any other user trying to create, update, or delete this invoice item.
     * @principle Enforces document ownership for all operations on invoice item documents.
     */
    match /users/{userId}/clients/{clientId}/invoices/{invoiceId}/invoiceItems/{invoiceItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == invoiceItemId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}